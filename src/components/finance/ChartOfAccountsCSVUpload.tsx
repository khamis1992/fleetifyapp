import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Upload, 
  Download, 
  FileSpreadsheet, 
  CheckCircle, 
  XCircle, 
  AlertTriangle,
  Undo,
  FileText,
  Layers,
  Eye,
  Save
} from 'lucide-react';
import { useEnhancedChartOfAccountsCSVUpload } from '@/hooks/useEnhancedChartOfAccountsCSVUpload';
import { CSVDragDropUpload } from './csv-import/CSVDragDropUpload';
import { AccountsPreviewTable } from './csv-import/AccountsPreviewTable';
import { AccountsTreeView } from './csv-import/AccountsTreeView';

interface ChartOfAccountsCSVUploadProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onUploadComplete: () => void;
}

export const ChartOfAccountsCSVUpload: React.FC<ChartOfAccountsCSVUploadProps> = ({
  open,
  onOpenChange,
  onUploadComplete
}) => {
  const [activeTab, setActiveTab] = useState('upload');
  const [csvData, setCsvData] = useState<any[]>([]);
  const [fileName, setFileName] = useState('');
  const [uploadError, setUploadError] = useState<string>('');
  
  const {
    processCSVFile,
    processCSVData,
    uploadAccounts,
    downloadTemplate,
    isUploading,
    progress,
    results,
    processedData,
    hierarchyErrors
  } = useEnhancedChartOfAccountsCSVUpload();

  // ูุนุงูุฌุฉ ุฑูุน ุงูููู
  const handleFileProcessed = async (data: any[], fileName: string) => {
    try {
      setUploadError('');
      setCsvData(data);
      setFileName(fileName);
      
      // ูุนุงูุฌุฉ ุงูุจูุงูุงุช ูุฅูุดุงุก ุงูุชุณูุณู ุงููุฑูู
      console.log('๐ [UPLOAD_DEBUG] Raw CSV data sample:', data.slice(0, 3));
      const result = processCSVData(data);
      console.log('๐ [UPLOAD_DEBUG] Processed data result:', result);
      console.log('๐ [UPLOAD_DEBUG] Result data sample:', result.data.slice(0, 3));
      
      // ุงูุงูุชูุงู ุฅูู ุชุจููุจ ุงููุนุงููุฉ
      setActiveTab('preview');
    } catch (error: any) {
      setUploadError(error.message);
    }
  };

  const handleFileError = (error: string) => {
    setUploadError(error);
    setCsvData([]);
    setFileName('');
  };

  const handleSaveAccounts = async () => {
    if (processedData.length === 0) {
      setUploadError('ูุง ุชูุฌุฏ ุจูุงูุงุช ููุญูุธ');
      return;
    }

    await uploadAccounts();
    if (results && (results.successful > 0 || results.updated > 0)) {
      onUploadComplete();
    }
  };

  const resetUpload = () => {
    setCsvData([]);
    setFileName('');
    setUploadError('');
    setActiveTab('upload');
  };

  // ุงูุงูุชูุงู ุฅูู ุชุจููุจ ุงููุชุงุฆุฌ ุนูุฏ ุงูุชูุงู ุงูุฑูุน
  useEffect(() => {
    if (results && !isUploading) {
      setActiveTab('results');
    }
  }, [results, isUploading]);

  const downloadErrorReport = () => {
    if (!results?.errors.length && !results?.hierarchyErrors.length) return;

    const headers = ['ููุน ุงูุฎุทุฃ', 'ุฑูู ุงูุตู', 'ุฑูู ุงูุญุณุงุจ', 'ุฑุณุงูุฉ ุงูุฎุทุฃ'];
    const csvContent = [
      headers.join(','),
      ...(results?.errors.map(error => 
        ['ุฎุทุฃ ูู ุงูุจูุงูุงุช', error.row, error.account_code || '', error.message].map(cell => `"${cell}"`).join(',')
      ) || []),
      ...(results?.hierarchyErrors.map(error => 
        ['ุฎุทุฃ ูู ุงูุชุณูุณู ุงููุฑูู', error.rowNumber, error.accountCode, error.message].map(cell => `"${cell}"`).join(',')
      ) || [])
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', 'chart_accounts_errors.csv');
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-7xl max-h-[95vh] overflow-y-auto" dir="rtl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <FileSpreadsheet className="h-5 w-5" />
            ุงุณุชูุฑุงุฏ ุดุฌุฑุฉ ุงูุญุณุงุจุงุช (CSV)
          </DialogTitle>
        </DialogHeader>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger 
              value="upload" 
              className="flex items-center gap-2"
            >
              <Upload className="h-4 w-4" />
              ุฑูุน ุงูููู
            </TabsTrigger>
            <TabsTrigger 
              value="preview"
              className="flex items-center gap-2"
              disabled={csvData.length === 0}
            >
              <Eye className="h-4 w-4" />
              ูุนุงููุฉ ุงูุจูุงูุงุช
            </TabsTrigger>
            <TabsTrigger 
              value="tree"
              className="flex items-center gap-2"
              disabled={processedData.length === 0}
            >
              <Layers className="h-4 w-4" />
              ุดุฌุฑุฉ ุงูุญุณุงุจุงุช
            </TabsTrigger>
            <TabsTrigger 
              value="results"
              className="flex items-center gap-2"
              disabled={!results}
            >
              <CheckCircle className="h-4 w-4" />
              ุงููุชุงุฆุฌ
            </TabsTrigger>
          </TabsList>

          <TabsContent value="upload" className="space-y-6">
            {/* Template Download */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Download className="h-5 w-5" />
                  ุชุญููู ุงููุงูุจ
                </CardTitle>
                <CardDescription>
                  ูู ุจุชุญููู ูุงูุจ CSV ูุชุนุจุฆุฉ ุจูุงูุงุช ุดุฌุฑุฉ ุงูุญุณุงุจุงุช
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button 
                  onClick={downloadTemplate}
                  className="flex items-center gap-2"
                  variant="outline"
                >
                  <Download className="h-4 w-4" />
                  ุชุญููู ูุงูุจ CSV
                </Button>
              </CardContent>
            </Card>

            {/* File Upload */}
            <CSVDragDropUpload
              onFileProcessed={handleFileProcessed}
              onError={handleFileError}
            />

            {/* Upload Error */}
            {uploadError && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>{uploadError}</AlertDescription>
              </Alert>
            )}

            {/* Instructions */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  ุชุนูููุงุช ุงูุงุณุชูุฑุงุฏ
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 text-sm">
                <div className="space-y-2">
                  <p className="font-medium">ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ:</p>
                  <ul className="space-y-1 mr-4">
                    <li>โข <strong>ุงููุณุชูู:</strong> ูุณุชูู ุงูุญุณุงุจ ูู ุงูุดุฌุฑุฉ (1-6)</li>
                    <li>โข <strong>ุฑูู ุงูุญุณุงุจ:</strong> ุฑูู ุงูุญุณุงุจ ุงููุฑูุฏ</li>
                    <li>โข <strong>ุงููุตู:</strong> ุงุณู ุงูุญุณุงุจ ุจุงูุนุฑุจูุฉ</li>
                    <li>โข <strong>ุงููุตู ุจุงูุฅูุฌููุฒู:</strong> ุงุณู ุงูุญุณุงุจ ุจุงูุฅูุฌููุฒูุฉ</li>
                  </ul>
                </div>
                
                <div className="space-y-2">
                  <p className="font-medium">ููุงุนุฏ ุงูุชุณูุณู ุงููุฑูู:</p>
                  <ul className="space-y-1 mr-4">
                    <li>โข ูู ุญุณุงุจ ูุนุฑู ุฃุจูู ุจุงูุงุนุชูุงุฏ ุนูู ุฑูู ุงูุญุณุงุจ</li>
                    <li>โข ูุซุงู: 1110101 ุงุจู ููุญุณุงุจ 11101ุ ููุฐุง ุงุจู ููุญุณุงุจ 111</li>
                    <li>โข ูุฌุจ ุฃู ูููู ุงูุญุณุงุจ ุงูุฃุจ ููุฌูุฏุงู ูุจู ุงูุญุณุงุจ ุงููุฑุนู</li>
                    <li>โข ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุฃุจ โ ุณูุธูุฑ ุงูุญุณุงุจ ุจุงูููู ุงูุฃุญูุฑ</li>
                  </ul>
                </div>

                <div className="space-y-2">
                  <p className="font-medium">ููุฒุงุช ุงููุธุงู:</p>
                  <ul className="space-y-1 mr-4">
                    <li>โข ุชุญุฏูุฏ ููุน ุงูุญุณุงุจ ุชููุงุฆูุงู ุจูุงุกู ุนูู ุงูุฑูู</li>
                    <li>โข ุฅูุดุงุก ุงูุชุณูุณู ุงููุฑูู ุชููุงุฆูุงู</li>
                    <li>โข ุงูุชุญูู ูู ุตุญุฉ ุงูุนูุงูุงุช ุงููุฑููุฉ</li>
                    <li>โข ูุนุงููุฉ ุงูุจูุงูุงุช ูุจู ุงูุญูุธ</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Preview Tab */}
          <TabsContent value="preview" className="space-y-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Badge variant="outline">
                  ููู: {fileName}
                </Badge>
                <Badge variant="secondary">
                  {csvData.length} ุณุฌู
                </Badge>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" onClick={resetUpload}>
                  <Undo className="h-4 w-4 ml-2" />
                  ุฅุนุงุฏุฉ ุชุญููู
                </Button>
                <Button 
                  onClick={() => setActiveTab('tree')}
                  disabled={processedData.length === 0}
                >
                  <Layers className="h-4 w-4 ml-2" />
                  ุนุฑุถ ุงูุดุฌุฑุฉ
                </Button>
              </div>
            </div>

            <AccountsPreviewTable 
              data={csvData}
              hierarchyErrors={hierarchyErrors}
            />
          </TabsContent>

          {/* Tree Tab */}
          <TabsContent value="tree" className="space-y-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Badge variant="outline">
                  {processedData.length} ุญุณุงุจ
                </Badge>
                {hierarchyErrors.length > 0 && (
                  <Badge variant="destructive">
                    {hierarchyErrors.length} ุฎุทุฃ ูุฑูู
                  </Badge>
                )}
              </div>
              <div className="flex gap-2">
                <Button variant="outline" onClick={() => setActiveTab('preview')}>
                  <Eye className="h-4 w-4 ml-2" />
                  ุนูุฏุฉ ูููุนุงููุฉ
                </Button>
                <Button 
                  onClick={handleSaveAccounts}
                  disabled={isUploading || processedData.length === 0}
                  className="bg-green-600 hover:bg-green-700"
                >
                  <Save className="h-4 w-4 ml-2" />
                  {isUploading ? 'ุฌุงุฑู ุงูุญูุธ...' : 'ุญูุธ ุงูุญุณุงุจุงุช'}
                </Button>
              </div>
            </div>

            <AccountsTreeView 
              data={processedData}
              hierarchyErrors={hierarchyErrors}
            />
            
          </TabsContent>

          {/* Results Tab */}
          <TabsContent value="results" className="space-y-6">
            {/* Upload Progress */}
            {isUploading && (
              <Card>
                <CardHeader>
                  <CardTitle>ุฌุงุฑู ุญูุธ ุงูุญุณุงุจุงุช...</CardTitle>
                </CardHeader>
                <CardContent>
                  <Progress value={progress} className="w-full" />
                  <p className="text-sm text-muted-foreground mt-2">
                    {progress.toFixed(1)}% ููุชูู
                  </p>
                </CardContent>
              </Card>
            )}

            {/* Upload Results */}
            {results && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CheckCircle className="h-5 w-5" />
                    ูุชุงุฆุฌ ุงูุงุณุชูุฑุงุฏ
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-3 bg-green-50 rounded-lg">
                      <div className="text-2xl font-bold text-green-600">
                        {results.successful}
                      </div>
                      <div className="text-sm text-green-700">ุชู ุฅูุดุงุคูุง</div>
                    </div>
                    
                    <div className="text-center p-3 bg-blue-50 rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">
                        {results.updated}
                      </div>
                      <div className="text-sm text-blue-700">ุชู ุชุญุฏูุซูุง</div>
                    </div>
                    
                    <div className="text-center p-3 bg-yellow-50 rounded-lg">
                      <div className="text-2xl font-bold text-yellow-600">
                        {results.skipped}
                      </div>
                      <div className="text-sm text-yellow-700">ุชู ุชุฎุทููุง</div>
                    </div>
                    
                    <div className="text-center p-3 bg-red-50 rounded-lg">
                      <div className="text-2xl font-bold text-red-600">
                        {results.failed + results.hierarchyErrors.length}
                      </div>
                      <div className="text-sm text-red-700">ูุดูุช</div>
                    </div>
                  </div>

                  {/* Success Message */}
                  {(results.successful > 0 || results.updated > 0) && (
                    <Alert className="border-green-200 bg-green-50">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <AlertDescription className="text-green-800">
                        โ ุชู ุงุณุชูุฑุงุฏ ุดุฌุฑุฉ ุงูุญุณุงุจุงุช ุจูุฌุงุญ - {results.successful + results.updated} ุญุณุงุจ
                      </AlertDescription>
                    </Alert>
                  )}

                  {/* Hierarchy Errors */}
                  {results.hierarchyErrors.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="font-medium text-red-700 flex items-center gap-2">
                        <AlertTriangle className="h-4 w-4" />
                        ุฃุฎุทุงุก ุงูุชุณูุณู ุงููุฑูู ({results.hierarchyErrors.length})
                      </h4>
                      
                      <div className="max-h-40 overflow-y-auto space-y-1">
                        {results.hierarchyErrors.slice(0, 10).map((error, index) => (
                          <Alert key={index} variant="destructive">
                            <AlertTriangle className="h-4 w-4" />
                            <AlertDescription>
                              <strong>ุตู {error.rowNumber}:</strong> ุญุณุงุจ {error.accountCode} - {error.message}
                            </AlertDescription>
                          </Alert>
                        ))}
                        
                        {results.hierarchyErrors.length > 10 && (
                          <p className="text-sm text-muted-foreground">
                            ูุฃุฎุทุงุก ุฃุฎุฑู... ({results.hierarchyErrors.length - 10} ุฅุถุงููุฉ)
                          </p>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Data Errors */}
                  {results.errors.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="font-medium text-red-700 flex items-center gap-2">
                        <XCircle className="h-4 w-4" />
                        ุฃุฎุทุงุก ุงูุจูุงูุงุช ({results.errors.length})
                      </h4>
                      
                      <div className="max-h-40 overflow-y-auto space-y-1">
                        {results.errors.slice(0, 10).map((error, index) => (
                          <Alert key={index} variant="destructive">
                            <AlertTriangle className="h-4 w-4" />
                            <AlertDescription>
                              <strong>ุตู {error.row}:</strong> {error.message}
                              {error.account_code && ` (ุญุณุงุจ: ${error.account_code})`}
                            </AlertDescription>
                          </Alert>
                        ))}
                        
                        {results.errors.length > 10 && (
                          <p className="text-sm text-muted-foreground">
                            ูุฃุฎุทุงุก ุฃุฎุฑู... ({results.errors.length - 10} ุฅุถุงููุฉ)
                          </p>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Download Error Report */}
                  {(results.errors.length > 0 || results.hierarchyErrors.length > 0) && (
                    <Button 
                      onClick={downloadErrorReport}
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-2"
                    >
                      <Download className="h-4 w-4" />
                      ุชุญููู ุชูุฑูุฑ ุงูุฃุฎุทุงุก
                    </Button>
                  )}

                  {/* Action Buttons */}
                  <div className="flex gap-2 pt-4">
                    <Button onClick={resetUpload} variant="outline">
                      <Upload className="h-4 w-4 ml-2" />
                      ุงุณุชูุฑุงุฏ ููู ุฌุฏูุฏ
                    </Button>
                    <Button onClick={() => onOpenChange(false)}>
                      ุฅุบูุงู
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};