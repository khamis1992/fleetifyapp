import { useState } from "react";
import { usePayments } from "@/hooks/useFinance";
import { PaymentForm } from "@/components/finance/PaymentForm";
import { FinanceErrorBoundary } from "@/components/finance/FinanceErrorBoundary";
import { PaymentAnalyticsCard } from "@/components/finance/PaymentAnalyticsCard";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from "@/components/ui/breadcrumb";
import { Plus, Search, Filter, BarChart3, CreditCard, Eye, FileText, Sparkles, Trash2 } from "lucide-react";
import { Link } from "react-router-dom";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { LoadingSpinner } from "@/components/ui/loading-spinner";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useCurrencyFormatter } from "@/hooks/useCurrencyFormatter";
import { UnifiedPaymentUpload } from "@/components/finance/payment-upload/UnifiedPaymentUpload";
import { BulkDeletePaymentsDialog } from "@/components/finance/payments/BulkDeletePaymentsDialog";
import { useSimpleBreakpoint } from "@/hooks/use-mobile-simple";

const Payments = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("");
  const [filterMethod, setFilterMethod] = useState("");
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [selectedPayment, setSelectedPayment] = useState(null);
  const [isPreviewDialogOpen, setIsPreviewDialogOpen] = useState(false);
  const [isUnifiedUploadOpen, setIsUnifiedUploadOpen] = useState(false);
  const [isBulkDeleteOpen, setIsBulkDeleteOpen] = useState(false);
  const [dateRange, setDateRange] = useState({
    start: "",
    end: ""
  });

  const { data: payments, isLoading, error, refetch } = usePayments();
  const { formatCurrency } = useCurrencyFormatter();
  const { isMobile } = useSimpleBreakpoint();

  console.log("๐ [Payments Page] ุญุงูุฉ ุงูุชุญููู:", {
    isLoading,
    error: error?.message,
    paymentsCount: payments?.length || 0
  });

  const filteredPayments = payments?.filter(payment => {
    const matchesSearch = payment.payment_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         payment.reference_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         payment.notes?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = !filterStatus || filterStatus === "all" || payment.payment_status === filterStatus;
    const matchesMethod = !filterMethod || filterMethod === "all" || payment.payment_method === filterMethod;
    return matchesSearch && matchesStatus && matchesMethod;
  }) || [];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-success/10 text-success border-success/20';
      case 'cleared': return 'bg-success/10 text-success border-success/20';
      case 'pending': return 'bg-warning/10 text-warning border-warning/20';
      case 'cancelled': return 'bg-destructive/10 text-destructive border-destructive/20';
      case 'bounced': return 'bg-destructive/10 text-destructive border-destructive/20';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'completed': return 'ููุชููุฉ';
      case 'cleared': return 'ููุงุตุฉ';
      case 'pending': return 'ูุนููุฉ';
      case 'cancelled': return 'ููุบุงุฉ';
      case 'bounced': return 'ูุฑุชุฏุฉ';
      default: return status;
    }
  };

  const getMethodLabel = (method: string) => {
    switch (method) {
      case 'cash': return 'ููุฏู';
      case 'check': return 'ุดูู';
      case 'bank_transfer': return 'ุญูุงูุฉ ุจูููุฉ';
      case 'credit_card': return 'ุจุทุงูุฉ ุงุฆุชูุงู';
      case 'debit_card': return 'ุจุทุงูุฉ ุฎุตู';
      default: return method;
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'receipt': return 'ูุจุถ';
      case 'payment': return 'ุตุฑู';
      default: return type;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'receipt': return 'bg-success/10 text-success border-success/20';
      case 'payment': return 'bg-primary/10 text-primary border-primary/20';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  return (
    <FinanceErrorBoundary
      error={error ? new Error(error.message || 'ุฎุทุฃ ูู ุชุญููู ุงููุฏููุนุงุช') : null}
      isLoading={isLoading}
      onRetry={() => {
        console.log("๐ [Payments Page] ุฅุนุงุฏุฉ ุชุญููู ุงููุฏููุนุงุช");
        refetch();
      }}
      title="ุฎุทุฃ ูู ุงููุฏููุนุงุช"
      context="ุตูุญุฉ ุงููุฏููุนุงุช"
    >
      <div className="container mx-auto p-6">
        <div className="space-y-6">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/finance">ุงููุงููุฉ</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage>ุงููุฏููุนุงุช</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>

        <div className={`${isMobile ? 'space-y-4' : 'flex justify-between items-center'}`}>
          <div className="flex items-center gap-4">
            <div className="p-3 bg-gradient-to-br from-primary to-primary/80 rounded-xl text-primary-foreground">
              <CreditCard className="h-6 w-6" />
            </div>
            <div>
              <h1 className={`${isMobile ? 'text-2xl' : 'text-3xl'} font-bold`}>ุงููุฏููุนุงุช</h1>
              <p className="text-muted-foreground text-sm">ุฅุฏุงุฑุฉ ุงููุฏููุนุงุช ูุงูููุจูุถุงุช ูุน ุงููุธุงู ุงูููุญุฏ ุงููุชุทูุฑ</p>
            </div>
          </div>
          
          {/* Desktop Action Buttons */}
          {!isMobile && (
            <div className="flex items-center gap-2">
              <Button 
                variant="outline" 
                onClick={() => setIsUnifiedUploadOpen(true)}
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white border-0"
              >
                <Sparkles className="h-4 w-4 mr-2" />
                ุฑูุน ุงููุฏููุนุงุช ุงูุฐูู
              </Button>
              <Button variant="outline" asChild>
                <Link to="/finance/payment-linking">
                  <CreditCard className="h-4 w-4 mr-2" />
                  ุฑุจุท ุงููุฏููุนุงุช
                </Link>
              </Button>
              <Button 
                variant="destructive" 
                onClick={() => setIsBulkDeleteOpen(true)}
                className="flex items-center gap-2"
              >
                <Trash2 className="h-4 w-4" />
                ุญุฐู ุฌููุน ุงููุฏููุนุงุช
              </Button>
              <Button onClick={() => setIsCreateDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                ุฏูุน ุฌุฏูุฏ
              </Button>
            </div>
          )}

          {/* Mobile Action Buttons */}
          {isMobile && (
            <div className="grid grid-cols-2 gap-3">
              <Button 
                variant="outline" 
                size="lg"
                className="h-12 text-base justify-start bg-gradient-to-r from-purple-600 to-blue-600 text-white border-0"
                onClick={() => setIsUnifiedUploadOpen(true)}
              >
                <Sparkles className="h-5 w-5 mr-2" />
                ุฑูุน ุงููุฏููุนุงุช ุงูุฐูู
              </Button>
              <Button 
                variant="outline" 
                size="lg"
                className="h-12 text-base justify-start"
                asChild
              >
                <Link to="/finance/payment-linking">
                  <CreditCard className="h-5 w-5 mr-2" />
                  ุฑุจุท ุงููุฏููุนุงุช
                </Link>
              </Button>
              <Button 
                variant="destructive" 
                size="lg"
                className="h-12 text-base justify-start"
                onClick={() => setIsBulkDeleteOpen(true)}
              >
                <Trash2 className="h-5 w-5 mr-2" />
                ุญุฐู ุฌููุน ุงููุฏููุนุงุช
              </Button>
              <Button 
                size="lg"
                className="h-12 text-base justify-start"
                onClick={() => setIsCreateDialogOpen(true)}
              >
                <Plus className="h-5 w-5 mr-2" />
                ุฏูุน ุฌุฏูุฏ
              </Button>
            </div>
          )}
        </div>

         <Tabs defaultValue="list" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="list" className="flex items-center gap-2">
              <CreditCard className="h-4 w-4" />
              ูุงุฆูุฉ ุงููุฏููุนุงุช
            </TabsTrigger>
            <TabsTrigger value="analytics" className="flex items-center gap-2">
              <BarChart3 className="h-4 w-4" />
              ุงูุชุญูููุงุช ูุงูุชูุงุฑูุฑ
            </TabsTrigger>
          </TabsList>

          <TabsContent value="analytics" className="mt-6">
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>ููุชุฑุฉ ุงูุชูุงุฑูุฑ</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="text-sm font-medium mb-2 block">ูู ุชุงุฑูุฎ</label>
                      <Input
                        type="date"
                        value={dateRange.start}
                        onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium mb-2 block">ุฅูู ุชุงุฑูุฎ</label>
                      <Input
                        type="date"
                        value={dateRange.end}
                        onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <PaymentAnalyticsCard 
                startDate={dateRange.start || undefined} 
                endDate={dateRange.end || undefined} 
              />
            </div>
          </TabsContent>

          <TabsContent value="list" className="mt-6">
            {/* ููุงุชุฑ ุงูุจุญุซ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Filter className="h-5 w-5" />
                  ุงูุจุญุซ ูุงูููุชุฑ
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                    <Input
                      placeholder="ุงูุจุญุซ ุจุฑูู ุงูุฏูุน ุฃู ุงููุฑุฌุน..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  
                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger>
                      <SelectValue placeholder="ุญุงูุฉ ุงูุฏูุน" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">ุฌููุน ุงูุญุงูุงุช</SelectItem>
                      <SelectItem value="completed">ููุชููุฉ</SelectItem>
                      <SelectItem value="pending">ูุนููุฉ</SelectItem>
                      <SelectItem value="cancelled">ููุบุงุฉ</SelectItem>
                    </SelectContent>
                  </Select>

                  <Select value={filterMethod} onValueChange={setFilterMethod}>
                    <SelectTrigger>
                      <SelectValue placeholder="ุทุฑููุฉ ุงูุฏูุน" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">ุฌููุน ุงูุทุฑู</SelectItem>
                      <SelectItem value="cash">ููุฏู</SelectItem>
                      <SelectItem value="check">ุดูู</SelectItem>
                       <SelectItem value="bank_transfer">ุญูุงูุฉ ุจูููุฉ</SelectItem>
                       <SelectItem value="credit_card">ุจุทุงูุฉ ุงุฆุชูุงู</SelectItem>
                       <SelectItem value="debit_card">ุจุทุงูุฉ ุฎุตู</SelectItem>
                    </SelectContent>
                  </Select>

                  <Button variant="outline" onClick={() => {
                    setSearchTerm("");
                    setFilterStatus("");
                    setFilterMethod("");
                  }}>
                    ูุณุญ ุงูููุงุชุฑ
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* ุฌุฏูู ุงููุฏููุนุงุช */}
            <Card>
              <CardHeader>
                <CardTitle>ูุงุฆูุฉ ุงููุฏููุนุงุช</CardTitle>
                <p className="text-sm text-muted-foreground">
                  ุฅุฌูุงูู {filteredPayments.length} ุฏูุนุฉ
                </p>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="flex flex-col justify-center items-center py-12 space-y-4">
                    <LoadingSpinner size="lg" />
                    <div className="text-center">
                      <p className="text-muted-foreground mb-2">ุฌุงุฑู ุชุญููู ุงููุฏููุนุงุช...</p>
                      <p className="text-sm text-muted-foreground">ูุชู ุงูุจุญุซ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช</p>
                    </div>
                  </div>
                ) : error ? (
                  <div className="text-center py-12 space-y-4">
                    <div className="p-4 bg-destructive/10 border border-destructive/20 rounded-lg">
                      <p className="text-destructive font-medium mb-2">ุญุฏุซ ุฎุทุฃ ูู ุชุญููู ุงููุฏููุนุงุช</p>
                      <p className="text-sm text-muted-foreground mb-4">{error.message}</p>
                      <div className="space-x-2">
                        <Button 
                          variant="outline" 
                          onClick={() => refetch()}
                          className="mr-2"
                        >
                          ุฅุนุงุฏุฉ ุงููุญุงููุฉ
                        </Button>
                        <Button 
                          variant="outline" 
                          onClick={() => window.location.reload()}
                        >
                          ุฅุนุงุฏุฉ ุชุญููู ุงูุตูุญุฉ
                        </Button>
                      </div>
                    </div>
                  </div>
                ) : filteredPayments.length === 0 ? (
                  <div className="text-center py-8">
                    <CreditCard className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground">ูุง ุชูุฌุฏ ูุฏููุนุงุช</p>
                    <Button 
                      variant="outline" 
                      className="mt-4"
                      onClick={() => setIsCreateDialogOpen(true)}
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      ุฅูุดุงุก ุฃูู ุฏูุนุฉ
                    </Button>
                  </div>
                ) : (
                  <div className="rounded-md border">
                    <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>ุฑูู ุงูุฏูุน</TableHead>
                            <TableHead>ุงูููุน</TableHead>
                            <TableHead>ุงูุชุงุฑูุฎ</TableHead>
                            <TableHead>ุงููุจูุบ</TableHead>
                            <TableHead>ุทุฑููุฉ ุงูุฏูุน</TableHead>
                            <TableHead>ุงูุญุงูุฉ</TableHead>
                            <TableHead>ุฑูู ุงููุฑุฌุน</TableHead>
                            <TableHead>ุงูุฅุฌุฑุงุกุงุช</TableHead>
                          </TableRow>
                        </TableHeader>
                      <TableBody>
                        {filteredPayments.map((payment) => (
                            <TableRow key={payment.id}>
                              <TableCell className="font-medium">
                                {payment.payment_number}
                              </TableCell>
                              <TableCell>
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor((payment as any).transaction_type)}`}>
                                  {getTypeLabel((payment as any).transaction_type)}
                                </span>
                              </TableCell>
                              <TableCell>
                                {new Date(payment.payment_date).toLocaleDateString('en-GB')}
                              </TableCell>
                               <TableCell className="font-mono">
                                 {formatCurrency(payment.amount, { minimumFractionDigits: 3, maximumFractionDigits: 3 })}
                               </TableCell>
                              <TableCell>
                                <Badge variant="outline">
                                  {getMethodLabel(payment.payment_method)}
                                </Badge>
                              </TableCell>
                              <TableCell>
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(payment.payment_status)}`}>
                                  {getStatusLabel(payment.payment_status)}
                                </span>
                              </TableCell>
                              <TableCell className="text-muted-foreground">
                                {payment.reference_number || '-'}
                              </TableCell>
                              <TableCell>
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  onClick={() => {
                                    setSelectedPayment(payment);
                                    setIsPreviewDialogOpen(true);
                                  }}
                                >
                                  <Eye className="h-4 w-4" />
                                </Button>
                              </TableCell>
                            </TableRow>
                         ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* ูููุฐุฌ ุฅูุดุงุก ุฏูุนุฉ ุฌุฏูุฏุฉ */}
        <PaymentForm
          open={isCreateDialogOpen}
          onOpenChange={setIsCreateDialogOpen}
          type="payment"
        />

        {/* ูุธุงู ุฑูุน ุงููุฏููุนุงุช ุงูููุญุฏ */}
        <UnifiedPaymentUpload 
          open={isUnifiedUploadOpen}
          onOpenChange={setIsUnifiedUploadOpen}
          onUploadComplete={() => {
            setIsUnifiedUploadOpen(false);
            // ุชุญุฏูุซ ุงูุจูุงูุงุช ุจุนุฏ ุงูุฑูุน - ุณูุชู ุชุญุฏูุซูุง ุชููุงุฆูุงู ุจูุงุณุทุฉ React Query
          }}
        />
        
        <BulkDeletePaymentsDialog
          isOpen={isBulkDeleteOpen}
          onClose={() => setIsBulkDeleteOpen(false)}
          totalPayments={payments?.length || 0}
        />

        {/* ูููู ูุนุงููุฉ ุชูุงุตูู ุงูุฏูุนุฉ */}
        <Dialog open={isPreviewDialogOpen} onOpenChange={setIsPreviewDialogOpen}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>ุชูุงุตูู ุงูุฏูุนุฉ</DialogTitle>
            </DialogHeader>
            {selectedPayment && (
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">ุฑูู ุงูุฏูุนุฉ</label>
                    <p className="font-medium">{selectedPayment.payment_number}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">ููุน ุงูุฏูุนุฉ</label>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor((selectedPayment as any).transaction_type)}`}>
                      {getTypeLabel((selectedPayment as any).transaction_type)}
                    </span>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">ุชุงุฑูุฎ ุงูุฏูุนุฉ</label>
                    <p className="font-medium">
                      {new Date(selectedPayment.payment_date).toLocaleDateString('en-GB', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">ุงููุจูุบ</label>
                    <p className="font-medium text-lg font-mono">
                      {formatCurrency(selectedPayment.amount, { minimumFractionDigits: 3, maximumFractionDigits: 3 })}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">ุทุฑููุฉ ุงูุฏูุน</label>
                    <p className="font-medium">{getMethodLabel(selectedPayment.payment_method)}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">ุงูุญุงูุฉ</label>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(selectedPayment.payment_status)}`}>
                      {getStatusLabel(selectedPayment.payment_status)}
                    </span>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">ุงูุนููุฉ</label>
                    <p className="font-medium">{selectedPayment.currency}</p>
                  </div>
                  
                  {/* ุงูููุฏ ุงููุญุงุณุจู ุงููุฑุชุจุท */}
                  {(selectedPayment as any).journal_entry_id && (
                    <div>
                      <label className="text-sm font-medium text-muted-foreground">ุงูููุฏ ุงููุญุงุณุจู</label>
                      <div className="flex items-center gap-2 mt-1">
                        <FileText className="h-4 w-4 text-blue-500" />
                        <span className="text-sm text-blue-600 hover:text-blue-800 cursor-pointer">
                          ููุฏ ูุญุงุณุจู #{(selectedPayment as any).journal_entry_id?.slice(-8)}
                        </span>
                      </div>
                    </div>
                  )}
                  
                  {/* ุชูุงุตูู ุจูููุฉ ุฅุถุงููุฉ */}
                  {(selectedPayment.payment_method === 'bank_transfer' || selectedPayment.payment_method === 'check') && (
                    <>
                      {selectedPayment.bank_account && (
                        <div>
                          <label className="text-sm font-medium text-muted-foreground">ุงูุญุณุงุจ ุงูุจููู</label>
                          <p className="font-medium font-mono">{selectedPayment.bank_account}</p>
                        </div>
                      )}
                      {(selectedPayment as any).check_number && (
                        <div>
                          <label className="text-sm font-medium text-muted-foreground">ุฑูู ุงูุดูู</label>
                          <p className="font-medium">{(selectedPayment as any).check_number}</p>
                        </div>
                      )}
                    </>
                  )}
                  
                  {selectedPayment.reference_number && (
                    <div>
                      <label className="text-sm font-medium text-muted-foreground">ุฑูู ุงููุฑุฌุน</label>
                      <p className="font-medium">{selectedPayment.reference_number}</p>
                    </div>
                  )}
                </div>
                
                {selectedPayment.notes && (
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">ููุงุญุธุงุช</label>
                    <p className="text-sm bg-muted p-3 rounded-md mt-1">
                      {selectedPayment.notes}
                    </p>
                  </div>
                )}
                
                <div className="pt-4 border-t">
                  <div className="grid grid-cols-2 gap-4 text-xs text-muted-foreground">
                    <div>
                      <span>ุชุงุฑูุฎ ุงูุฅูุดุงุก: </span>
                      {new Date(selectedPayment.created_at).toLocaleString('en-GB')}
                    </div>
                    <div>
                      <span>ุขุฎุฑ ุชุญุฏูุซ: </span>
                      {new Date(selectedPayment.updated_at).toLocaleString('en-GB')}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </DialogContent>
        </Dialog>
          </div>
        </div>
      </FinanceErrorBoundary>
  );
};

export default Payments;