name: Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  type-safety:
    runs-on: ubuntu-latest
    name: Type Safety & Schema Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript compilation check
      run: npx tsc --noEmit --skipLibCheck

    - name: Run custom type checker
      run: node scripts/type-checker.js

    - name: Run schema validator
      run: node scripts/schema-validator.js

    - name: ESLint check
      run: npx eslint src --ext .ts,.tsx --max-warnings 0

    - name: Prettier check
      run: npx prettier --check "src/**/*.{ts,tsx,js,jsx}"

  build-test:
    runs-on: ubuntu-latest
    name: Build & Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate

  performance-check:
    runs-on: ubuntu-latest
    name: Performance Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Analyze bundle size
      run: |
        npx bundlesize
        echo "Bundle analysis complete"

    - name: Check build size
      run: |
        BUILD_SIZE=$(du -sh dist | cut -f1)
        echo "Build size: $BUILD_SIZE"
        
        # Fail if build is larger than 10MB
        SIZE_BYTES=$(du -sb dist | cut -f1)
        MAX_SIZE=10485760  # 10MB in bytes
        
        if [ "$SIZE_BYTES" -gt "$MAX_SIZE" ]; then
          echo "Build size exceeds 10MB limit!"
          exit 1
        fi

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for SonarCloud

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  notify-results:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [type-safety, build-test, security-audit, performance-check, code-quality]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "Type Safety: ${{ needs.type-safety.result }}"
        echo "Build & Test: ${{ needs.build-test.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Performance Check: ${{ needs.performance-check.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        
        # Create summary
        if [[ "${{ needs.type-safety.result }}" == "success" && \
              "${{ needs.build-test.result }}" == "success" && \
              "${{ needs.security-audit.result }}" == "success" && \
              "${{ needs.performance-check.result }}" == "success" && \
              "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ All quality checks passed!"
        else
          echo "❌ Some quality checks failed!"
          exit 1
        fi